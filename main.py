import os
from dotenv import load_dotenv
import discord
from discord.ext import commands, tasks
from discord.ui import Button, View 
import aiohttp
import json
from datetime import datetime


# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
if not DISCORD_TOKEN:
    raise ValueError("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable DISCORD_TOKEN")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if not WEBHOOK_URL:
    raise ValueError("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable WEBHOOK_URL")

ORDER_CHANNEL_ID = int(os.getenv("ORDER_CHANNEL_ID", "0"))  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto order
EVENT_CHANNEL_ID = int(os.getenv("EVENT_CHANNEL_ID", "0"))  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto events

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á embed table ‡∏à‡∏≤‡∏Å Calendar
# -----------------------------
def create_event_embed(events):
    embed = discord.Embed(
        title="üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar",
        color=discord.Color.purple()
    )

    separator = "-------------------------------------"

    for event in events:
        summary = event.get("summary", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        start = event.get("start", {}).get("dateTime")
        end = event.get("end", {}).get("dateTime")
        location = event.get("location", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        html_link = event.get("htmlLink", "")
        meet_link = ""
        entry_points = event.get("conferenceData", {}).get("entryPoints", [])
        if entry_points:
            meet_link = entry_points[0].get("uri", "")

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        start_dt = datetime.fromisoformat(start).strftime("%Y-%m-%d %H:%M") if start else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
        end_dt = datetime.fromisoformat(end).strftime("%Y-%m-%d %H:%M") if end else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á table-like string
        table_text = (
            f"**‡πÄ‡∏ß‡∏•‡∏≤:** {start_dt} - {end_dt}\n"
            f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:** {location}\n"
            f"**Event Link:** [‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π]({html_link})\n"
        )
        if meet_link:
            table_text += f"**Google Meet:** [‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°]({meet_link})\n"

        table_text += f"{separator}"  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏±‡πâ‡∏ô

        embed.add_field(name=summary, value=table_text, inline=False)

    return embed

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡∏à‡∏≤‡∏Å Webhook
# -----------------------------
async def fetch_calendar_events():
    async with aiohttp.ClientSession() as session:
        payload = {"source": "calendar"}  # ‚úÖ ‡∏™‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• calendar
        async with session.post(WEBHOOK_URL, json=payload) as resp:
            if resp.status != 200:
                print(f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status}")
                return []

            text = await resp.text()
            try:
                data = json.loads(text)
                if isinstance(data, list):
                    return data
                else:
                    print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà list")
                    return []
            except json.JSONDecodeError:
                print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡∏à‡∏≤‡∏Å Webhook ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON")
                return []

# -----------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !events
# -----------------------------
@bot.command()
async def events(ctx):
    events_data = await fetch_calendar_events()
    if not events_data:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar")
        return

    embed = create_event_embed(events_data)
    await ctx.send(embed=embed)

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order + ‡∏õ‡∏∏‡πà‡∏° Print
# -----------------------------
async def fetch_orders(channel, author_name="‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", source="manual"):
    async with aiohttp.ClientSession() as session:
        payload = {"source": source}
        async with session.post(WEBHOOK_URL, json=payload) as resp:
            if resp.status != 200:
                await channel.send(f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status}")
                return

            text = await resp.text()
            try:
                data = json.loads(text)
            except json.JSONDecodeError:
                await channel.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Webhook ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON")
                return

            for order_item in data:
                picking_id = order_item.get("picking_id", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                names = order_item.get("names", [])
                link = order_item.get("link")
                state = order_item.get("state", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")

                # ‡πÅ‡∏õ‡∏•‡∏á state ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á
                if state in ["confirmed", "waiting"]:
                    state_display = "‡∏£‡∏≠"
                elif state == "assigned":
                    state_display = "‡∏û‡∏£‡πâ‡∏≠‡∏°"
                else:
                    state_display = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

                # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                names_list = "\n".join([f"- {name}" for name in names]) if names else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"

                # Embed
                embed = discord.Embed(
                    title=f"üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {picking_id}",
                    description=f"**‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:**\n{names_list}\n\n**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** `{state_display}`",
                    color=discord.Color.green() if state == "assigned" else discord.Color.blue()
                )
                embed.set_footer(text=f"‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢: {author_name}")

                # ‡∏õ‡∏∏‡πà‡∏° Print ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ state == assigned ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå
                view = None
                if state == "assigned" and link:
                    view = View()
                    print_button = Button(
                        label="üñ®Ô∏è Print",
                        style=discord.ButtonStyle.link,
                        url=link
                    )
                    view.add_item(print_button)

                await channel.send(embed=embed, view=view)
                
# -----------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !order
# -----------------------------
@bot.command()
async def order(ctx):
    await fetch_orders(ctx.channel, ctx.author.display_name, source="order")

# -----------------------------
# Task: ‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
# -----------------------------
@tasks.loop(seconds=3600)
async def auto_order():
    if ORDER_CHANNEL_ID:
        channel = bot.get_channel(ORDER_CHANNEL_ID)
        if channel:
            await fetch_orders(channel, "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", source="order")

# -----------------------------
# Task: ‡πÄ‡∏î‡πâ‡∏á !events ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏±‡∏ô
# -----------------------------
@tasks.loop(seconds=86400)
async def auto_events():
    if EVENT_CHANNEL_ID:
        channel = bot.get_channel(EVENT_CHANNEL_ID)
        if channel:
            events_data = await fetch_calendar_events()
            if events_data:
                embed = create_event_embed(events_data)
                await channel.send(embed=embed)

# -----------------------------
# Event on_ready
# -----------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    if ORDER_CHANNEL_ID:
        auto_order.start()
    if EVENT_CHANNEL_ID:
        auto_events.start()

# -----------------------------
# ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
# -----------------------------
bot.run(DISCORD_TOKEN)

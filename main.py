import os
import discord
from discord.ext import commands, tasks
from discord.ui import Button, View 
import aiohttp
import json
from datetime import datetime
import asyncio
from aiohttp import web, ClientSession
from dotenv import load_dotenv

# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î environment variables
# -----------------------------
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ORDER_CHANNEL_ID = int(os.getenv("ORDER_CHANNEL_ID", "0"))
EVENT_CHANNEL_ID = int(os.getenv("EVENT_CHANNEL_ID", "0"))

if not DISCORD_TOKEN or not WEBHOOK_URL:
    raise ValueError("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")

# -----------------------------
# Discord bot setup
# -----------------------------
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# -----------------------------
# Globals for Training
# -----------------------------
progress_message = None
is_running = False
last_update_time = None
TIMEOUT_SECONDS = 900  # 15 ‡∏ô‡∏≤‡∏ó‡∏µ

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Utility
# -----------------------------
def make_bar(p, total=20):
    filled = int((p / 100) * total)
    return "‚ñì" * filled + "‚ñë" * (total - filled)

# -----------------------------
# 1Ô∏è‚É£ Calendar Embed
# -----------------------------
def create_event_embed(events):
    embed = discord.Embed(title="üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar", color=discord.Color.purple())
    separator = "-------------------------------------"

    for event in events:
        summary = event.get("summary", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        start = event.get("start", {}).get("dateTime")
        end = event.get("end", {}).get("dateTime")
        location = event.get("location", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        html_link = event.get("htmlLink", "")
        meet_link = ""
        entry_points = event.get("conferenceData", {}).get("entryPoints", [])
        if entry_points:
            meet_link = entry_points[0].get("uri", "")

        start_dt = datetime.fromisoformat(start).strftime("%Y-%m-%d %H:%M") if start else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
        end_dt = datetime.fromisoformat(end).strftime("%Y-%m-%d %H:%M") if end else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        table_text = (
            f"**‡πÄ‡∏ß‡∏•‡∏≤:** {start_dt} - {end_dt}\n"
            f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:** {location}\n"
            f"**Event Link:** [‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π]({html_link})\n"
        )
        if meet_link:
            table_text += f"**Google Meet:** [‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°]({meet_link})\n"
        table_text += f"{separator}"
        embed.add_field(name=summary, value=table_text, inline=False)

    return embed

async def fetch_calendar_events():
    async with aiohttp.ClientSession() as session:
        payload = {"source": "calendar"}
        async with session.post(WEBHOOK_URL, json=payload) as resp:
            if resp.status != 200:
                print(f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status}")
                return []
            try:
                data = await resp.json()
                return data if isinstance(data, list) else []
            except:
                print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar ‡∏à‡∏≤‡∏Å Webhook ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON")
                return []

@bot.command()
async def events(ctx):
    events_data = await fetch_calendar_events()
    if not events_data:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Calendar")
        return
    embed = create_event_embed(events_data)
    await ctx.send(embed=embed)

# -----------------------------
# 2Ô∏è‚É£ Orders + Print Button
# -----------------------------
async def fetch_orders(channel, author_name="‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", source="manual"):
    async with aiohttp.ClientSession() as session:
        payload = {"source": source}
        async with session.post(WEBHOOK_URL, json=payload) as resp:
            if resp.status != 200:
                await channel.send(f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {resp.status}")
                return
            try:
                data = await resp.json()
            except:
                await channel.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Webhook ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON")
                return

            for order_item in data:
                picking_id = order_item.get("picking_id", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                names = order_item.get("names", [])
                link = order_item.get("link")
                state = order_item.get("state", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                state_display = {"confirmed": "‡∏£‡∏≠", "waiting": "‡∏£‡∏≠", "assigned": "‡∏û‡∏£‡πâ‡∏≠‡∏°"}.get(state, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                names_list = "\n".join([f"- {name}" for name in names]) if names else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"

                embed = discord.Embed(
                    title=f"üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {picking_id}",
                    description=f"**‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:**\n{names_list}\n\n**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** `{state_display}`",
                    color=discord.Color.green() if state == "assigned" else discord.Color.blue()
                )
                embed.set_footer(text=f"‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢: {author_name}")

                view = None
                if state == "assigned" and link:
                    view = View()
                    view.add_item(Button(label="üñ®Ô∏è Print", style=discord.ButtonStyle.link, url=link))
                await channel.send(embed=embed, view=view)

@bot.command()
async def order(ctx):
    await fetch_orders(ctx.channel, ctx.author.display_name, source="order")

# -----------------------------
# 3Ô∏è‚É£ Attach File (Google Drive)
# -----------------------------
class DriveButton(View):
    def __init__(self, url: str):
        super().__init__()
        self.add_item(Button(label="üìé ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå", url=url))

@bot.command()
async def attach_file(ctx):
    drive_url = "https://drive.google.com/drive/u/0/folders/1Whual8ZwoS-DbdzJ03PWYwC1lgJFZytj"
    info_text = (
        "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Agent ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n\n"
        "**‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:**\n"
        "- ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó\n"
        "- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n"
        "- ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ **‡πÑ‡∏ü‡∏•‡πå Excel** ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
    )
    await ctx.reply(info_text, view=DriveButton(drive_url), mention_author=False)

# -----------------------------
# 4Ô∏è‚É£ Training + Webhook Progress
# -----------------------------
@bot.command()
async def training(ctx):
    global progress_message, is_running, last_update_time
    allowed_channel_id = 1425405957609095230
    if ctx.channel.id != allowed_channel_id:
        await ctx.reply(
            f"‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
            f"[‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà](https://discord.com/channels/{ctx.guild.id}/{allowed_channel_id})",
            mention_author=False
        )
        return
    if is_running:
        await ctx.reply("‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", mention_author=False)
        return

    is_running = True
    progress_message = await ctx.reply(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£... [{make_bar(0)}] 0%", mention_author=False)
    last_update_time = asyncio.get_event_loop().time()

    async with ClientSession() as session:
        await session.post(
            "https://n8n.cynlive.com/webhook-test/9e0e7c3e-9f2c-4c94-892f-b91997be92a4",
            json={"discord_user": str(ctx.author.id)}
        )
    check_webhook_timeout.start()

@tasks.loop(seconds=10)
async def check_webhook_timeout():
    global progress_message, is_running, last_update_time
    if is_running and last_update_time:
        now = asyncio.get_event_loop().time()
        if now - last_update_time > TIMEOUT_SECONDS:
            if progress_message:
                await progress_message.edit(content="‚ùå Process timeout! ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å webhook")
                progress_message = None
            is_running = False
            check_webhook_timeout.stop()

async def webhook_handler(request):
    global progress_message, is_running, last_update_time
    data = await request.json()
    percent = data.get("progress", 0)
    message = data.get("message", "")
    if progress_message:
        await progress_message.edit(content=f"{message} [{make_bar(percent)}] {percent}%")
        last_update_time = asyncio.get_event_loop().time()
        if percent >= 100:
            await progress_message.edit(content=f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå [{make_bar(100)}] 100%")
            progress_message = None
            is_running = False
            check_webhook_timeout.stop()
    return web.Response(text="ok")

# -----------------------------
# 5Ô∏è‚É£ Auto Tasks
# -----------------------------
@tasks.loop(seconds=3600)
async def auto_order():
    if ORDER_CHANNEL_ID:
        channel = bot.get_channel(ORDER_CHANNEL_ID)
        if channel:
            await fetch_orders(channel, "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", source="order")

@tasks.loop(seconds=86400)
async def auto_events():
    if EVENT_CHANNEL_ID:
        channel = bot.get_channel(EVENT_CHANNEL_ID)
        if channel:
            events_data = await fetch_calendar_events()
            if events_data:
                embed = create_event_embed(events_data)
                await channel.send(embed=embed)

# -----------------------------
# 6Ô∏è‚É£ Webserver for Training webhook
# -----------------------------
app = web.Application()
app.router.add_post("/callback", webhook_handler)

async def start_webserver():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

# -----------------------------
# 7Ô∏è‚É£ Help Command
# -----------------------------
@bot.command()
async def help(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    embed = discord.Embed(title="ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó", color=discord.Color.gold())
    
    embed.add_field(name="!events", value="üìÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô embed", inline=False)
    embed.add_field(name="!order", value="üì¶ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Print ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö order ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", inline=False)
    embed.add_field(name="!attach_file", value="üìé ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Google Drive ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Agent", inline=False)
    embed.add_field(name="!training", value="‚öôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° process ‡∏Å‡∏≤‡∏£ training ‡∏Ç‡∏≠‡∏á AI Agent ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á progress bar\nüîí ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î", inline=False)
    embed.add_field(name="Auto Tasks", value="üïí ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", inline=False)
    embed.set_footer(text="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    await ctx.send(embed=embed)

# -----------------------------
# on_ready
# -----------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    if ORDER_CHANNEL_ID:
        auto_order.start()
    if EVENT_CHANNEL_ID:
        auto_events.start()
    bot.loop.create_task(start_webserver())

# -----------------------------
# Run bot
# -----------------------------
bot.run(DISCORD_TOKEN)
